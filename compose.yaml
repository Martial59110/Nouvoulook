# Compose file for Nouvoulook project: API, Angular admin, Astro front

services:
  ts-api-nouvoulook:
    build:
      context: ./api-nouvoulook
      dockerfile: Dockerfile
    image: ts-api-nouvoulook:latest
    container_name: ts-api-nouvoulook
    restart: unless-stopped
    init: true
    env_file:
      - ./api-nouvoulook/.env
    # The API requires a PostgreSQL database (see README)
    depends_on:
      - postgres
    networks:
      - backend
    ports:
      - "3001:3001"  # Expose NestJS API

  ts-admin:
    build:
      context: ./front-nouvoulook/admin
      dockerfile: Dockerfile
    image: ts-admin:latest
    container_name: ts-admin
    restart: unless-stopped
    init: true
    networks:
      - frontend
    ports:
      - "8080:8080"  # Expose Angular admin UI
    # env_file: ./front-nouvoulook/admin/.env  # Uncomment if .env file exists
    # The admin UI expects the API to be reachable at http://localhost:3001 (see README)
    depends_on:
      - ts-api-nouvoulook

  ts-front:
    build:
      context: ./front-nouvoulook/front
      dockerfile: Dockerfile
    image: ts-front:latest
    container_name: ts-front
    restart: unless-stopped
    init: true
    networks:
      - frontend
      - backend
    ports:
      - "4321:4321"  # Expose Astro front UI
    # env_file: ./front-nouvoulook/front/.env  # Uncomment if .env file exists
    # The Astro front may call the API at http://localhost:3001
    depends_on:
      - ts-api-nouvoulook

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: nouvoulook
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"  # Changed from 5432:5432 to avoid conflict with local PostgreSQL
    # NOTE: Change POSTGRES_PASSWORD in production!

# Networks for service isolation and communication
networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

# Persistent volume for PostgreSQL data
volumes:
  pgdata:
